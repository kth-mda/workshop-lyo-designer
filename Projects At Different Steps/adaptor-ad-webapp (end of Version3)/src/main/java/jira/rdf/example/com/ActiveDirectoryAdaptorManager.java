/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package jira.rdf.example.com;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import jira.rdf.example.com.servlet.ServiceProviderCatalogSingleton;
import jira.rdf.example.com.ServiceProviderInfo;
import jira.rdf.example.com.resources.Person;


// Start of user code imports
import java.util.ArrayList;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
import java.util.Properties;
import org.eclipse.lyo.tools.store.Store;
import org.eclipse.lyo.tools.store.StoreFactory;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
// End of user code

// Start of user code pre_class_code
// End of user code

public class ActiveDirectoryAdaptorManager {

    // Start of user code class_attributes
	public static Store store = null;
	private static final Logger log = LoggerFactory.getLogger(ActiveDirectoryAdaptorManager.class);
    // End of user code
    
    
    // Start of user code class_methods
    // End of user code

    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
        
        // Start of user code contextInitializeServletListener
        try {
            Properties props = new Properties();
            props.load(new FileInputStream("src\\main\\resources\\jira.properties"));
            String sparqlQueryUrl = props.getProperty("sparqlQueryUrl");
            String sparqlUpdateUrl = props.getProperty("sparqlUpdateUrl");
            store = StoreFactory.sparql(sparqlQueryUrl, sparqlUpdateUrl);
        } catch (IOException e) {
            log.error("problem loading properties file", e);
            System.exit(1);
        }
        // End of user code
    }

    public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
    {
        
        // Start of user code contextDestroyed
        // TODO Implement code to shutdown connections to data backbone etc...
        // End of user code
    }

    public static ServiceProviderInfo[] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        ServiceProviderInfo[] serviceProviderInfos = {};
        
        // Start of user code "ServiceProviderInfo[] getServiceProviderInfos(...)"
        ServiceProviderInfo anSP = new ServiceProviderInfo();
        anSP.name = "the only SP"; 
        anSP.serviceProviderId = "1";
        serviceProviderInfos = new ServiceProviderInfo[1];
        serviceProviderInfos[0] = anSP;
        // End of user code
        return serviceProviderInfos;
    }

    public static List<Person> queryPersons(HttpServletRequest httpServletRequest, final String serviceProviderId, String where, int page, int limit)
    {
        List<Person> resources = null;
        
        // Start of user code queryPersons
        // This is a very primitive query functionality. We ought to at least
        // use the proper term oslc.searchTerms for such a search, instead of "where".
        try {
            resources = new ArrayList<Person>();
            List<Person> allResources = store.getResources(new URI("urn:x-arq:DefaultGraph"), Person.class, 100, 0);
            for (Person person : allResources) {
                if ((where == null) || (person.getName().equals(where)))
                    resources.add(person);
            }
        } catch (Exception e) {
            log.error("Failed to get a User resource based on query", e);
            return new ArrayList<Person>();
        }
        // End of user code
        return resources;
    }


    public static Person getPerson(HttpServletRequest httpServletRequest, final String serviceProviderId, final String personId)
    {
        Person aResource = null;
        
        // Start of user code getPerson
        try {
            URI changeRequestUri = Person.constructURI(serviceProviderId, personId);
            aResource = ActiveDirectoryAdaptorManager.store.getResource(new URI ("urn:x-arq:DefaultGraph"), changeRequestUri, Person.class);
        } catch (Exception e) {
            log.error("Failed to get a ChangeRequest resource", e);
        }
        // End of user code
        return aResource;
    }




    public static String getETagFromPerson(final Person aResource)
    {
        String eTag = null;
        // Start of user code getETagFromPerson
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }

}
